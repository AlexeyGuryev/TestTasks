using System;
using System.Collections.Generic;
using System.Linq;
using StorageLogic.Exception;

namespace StorageLogic.Model
{
    /// <summary>
    /// Модель комнаты со списком мебели
    /// </summary>
    public class Room : IEquatable<Room>
    {
        public string Name { get; set; }

        public DateTime CreationDate { get; set; }

        public DateTime? RemoveDate { get; set; }

        public List<string> FurnitureList { get; set; }

        public List<RoomState> RoomStates { get; set; }

        // при сохранении состояния комнаты - нужно точно знать изменился ли объект
        #region equatables generated by resharper

        public bool Equals(Room other)
        {
            return string.Equals(Name, other.Name)
                && CreationDate.Equals(other.CreationDate)
                && RemoveDate.Equals(other.RemoveDate)
                && Enumerable.SequenceEqual(FurnitureList, other.FurnitureList);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Room)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (Name != null ? Name.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ CreationDate.GetHashCode();
                hashCode = (hashCode * 397) ^ RemoveDate.GetHashCode();
                hashCode = (hashCode * 397) ^ (FurnitureList != null ? FurnitureList.GetHashCode() : 0);
                return hashCode;
            }
        }

        #endregion

        /// <summary>
        /// HACK: изначально логика и тесты были написаны под dictionary
        /// для экономии времени использовано представление словаря вместо переделки логики
        /// </summary>
        public Dictionary<string, int> Furnitures
        {
            get
            {
                var list = FurnitureList ?? Enumerable.Empty<string>();
                return list
                    .GroupBy(c => c)
                    .ToDictionary(key => key.Key, value => value.Count());
            }
        }

        internal void AddFurniture(string furnitureType, int count = 1)
        {
            FurnitureList.AddRange(
                Enumerable.Repeat(furnitureType, count));
        }

        internal void RemoveFurniture(string furnitureType, int count = 1)
        {
            var countRoRemove = count > FurnitureList.Count() 
                ? FurnitureList.Count()
                : count;

            var listItemsByTypeCopy = FurnitureList
                .Where(c => c == furnitureType)
                .Take(countRoRemove)
                .ToList();

            listItemsByTypeCopy.ForEach(c => FurnitureList.Remove(c));
        }

        /// <summary>
        /// Фиксация нового состояния комнаты
        /// DateConsistenceException при наличие состояний на stateDate или поздних
        /// </summary>
        /// <param name="stateDate"></param>
        public void NewRoomState(DateTime stateDate)
        {
            var lastRoomState = RoomStates
                .OrderByDescending(c => c.StateDate)
                .FirstOrDefault();

            if (lastRoomState != null && lastRoomState.StateDate >= stateDate)
            {
                throw new DateConsistenceException(
                    "Room {0} already has state on {1:dd.MM.yyyy} or later date",
                    this.Name, stateDate);
            }

            if (lastRoomState != null)
            {
                if (this.Equals(lastRoomState.Room))
                {
                    return;
                }
            }
            RoomStates.Add(new RoomState(this, stateDate));
        }
    }
}
