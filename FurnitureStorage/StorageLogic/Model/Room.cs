using System;
using System.Collections.Generic;
using System.Linq;
using StorageLogic.Exception;

namespace StorageLogic.Model
{
    /// <summary>
    /// Модель комнаты со списком мебели
    /// </summary>
    public class Room : IEquatable<Room>
    {
        public string Name { get; set; }

        public DateTime CreationDate { get; set; }

        public DateTime? RemoveDate { get; set; }

        // при сохранении состояния комнаты - нужно точно знать изменился ли объект
        #region equatables generated by resharper

        public bool Equals(Room other)
        {
            return string.Equals(Name, other.Name)
                && CreationDate.Equals(other.CreationDate)
                && RemoveDate.Equals(other.RemoveDate)
                && Furnitures.SequenceEqual(other.Furnitures);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((Room)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = (Name != null ? Name.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ CreationDate.GetHashCode();
                hashCode = (hashCode * 397) ^ RemoveDate.GetHashCode();
                hashCode = (hashCode * 397) ^ (Furnitures!= null ? Furnitures.GetHashCode() : 0);
                return hashCode;
            }
        }

        #endregion

        public Dictionary<string, int> Furnitures { get; set; }

        internal void AddFurniture(string furnitureType, int count = 1)
        {
            if (Furnitures.ContainsKey(furnitureType))
            {
                Furnitures[furnitureType] += count;
            }
            else
            {
                Furnitures.Add(furnitureType, count);
            }
        }

        internal void RemoveFurniture(string furnitureType, int count = 1)
        {
            if (Furnitures.ContainsKey(furnitureType))
            {
                var countToRemove = Furnitures[furnitureType] < count
                    ? Furnitures[furnitureType]
                    : count;

                Furnitures[furnitureType] -= countToRemove;
                if (Furnitures[furnitureType] == 0)
                {
                    Furnitures.Remove(furnitureType);
                }
            }
            else
            {
                throw new ItemNotFoundException("Furniture type {0} not found in room {1}",
                    furnitureType, Name);
            }
        }
    }
}
